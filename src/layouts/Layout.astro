---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { client } from '../utils/sanityClient';

interface Props {
    title: string;
    description: string;
    image?: string;
}

const { 
    title, 
    description,
    image = '/default-social-image.png'
} = Astro.props;

const ajustes = await client.fetch(`*[_type == "ajustes"][0]`);
---

<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Orbitron:wght@400;500;600;700&display=swap" rel="stylesheet">

		<title>{title}</title>
		<meta name="description" content={description} />
        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        <meta property="og:image" content={new URL(image, Astro.url)} />
        <meta property="og:url" content={Astro.url} />
        <meta property="og:type" content="website" />
	</head>
	<body>
		<Header />
		<main>
			<slot />
		</main>
		<Footer ajustes={ajustes} />
	</body>
</html>

<style is:global>
    /* Paleta Premium con Transiciones */
    :root {
        /* Colores Profesionales */
        --color-primary: #ff6b00;
        --color-primary-light: #ff8c42;
        --color-primary-dark: #e55a00;
        --color-secondary: #1a1a2e;
        --color-secondary-light: #16213e;
        --color-accent: #0f3460;
        --color-text: #ffffff;
        --color-text-muted: #a8b2d1;
        --color-background: #0a0a0a;
        --color-surface: #1a1a1a;
        
        /* Gradients Din√°micos */
        --gradient-primary: linear-gradient(135deg, #ff6b00, #ff8c42);
        --gradient-secondary: linear-gradient(135deg, #1a1a2e, #16213e);
        --gradient-glass: linear-gradient(135deg, rgba(255, 107, 0, 0.1), rgba(255, 140, 66, 0.05));
        
        /* Animaciones */
        --transition-fast: 0.2s ease;
        --transition-medium: 0.4s ease;
        --transition-slow: 0.6s ease;
        
        /* Glass Effect */
        --glass-bg: rgba(26, 26, 26, 0.8);
        --glass-border: rgba(255, 107, 0, 0.2);
        
        /* Spacing */
        --spacing-xs: 0.5rem;
        --spacing-sm: 1rem;
        --spacing-md: 1.5rem;
        --spacing-lg: 2rem;
        --spacing-xl: 3rem;
        --spacing-2xl: 4rem;
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    html {
        font-family: 'Inter', sans-serif;
        background: var(--color-background);
        scroll-behavior: smooth;
        overflow-x: hidden;
    }

    body {
        color: var(--color-text);
        line-height: 1.6;
        -webkit-font-smoothing: antialiased;
    }

    h1, h2, h3, h4, h5, h6 {
        font-family: 'Orbitron', sans-serif;
        font-weight: 600;
        letter-spacing: -0.02em;
    }

    /* Animaciones Base */
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes slideInLeft {
        from {
            opacity: 0;
            transform: translateX(-50px);
        }
        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.05);
        }
    }

    @keyframes shimmer {
        0% {
            background-position: -200% 0;
        }
        100% {
            background-position: 200% 0;
        }
    }

    /* Utility Classes */
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 var(--spacing-md);
    }

    .btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        background: var(--gradient-primary);
        color: var(--color-background);
        padding: 0.875rem 2rem;
        border-radius: 50px;
        font-weight: 600;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        transition: all var(--transition-medium);
        border: none;
        cursor: pointer;
        position: relative;
        overflow: hidden;
    }

    .btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left var(--transition-medium);
    }

    .btn:hover::before {
        left: 100%;
    }

    .btn:hover {
        transform: translateY(-2px) scale(1.02);
        box-shadow: 0 10px 30px rgba(255, 107, 0, 0.4);
    }

    /* Scroll Animations */
    .animate-on-scroll {
        opacity: 0;
        transform: translateY(30px);
        transition: all var(--transition-medium);
    }

    .animate-on-scroll.animate {
        opacity: 1;
        transform: translateY(0);
    }

    /* Responsive */
    @media (max-width: 768px) {
        .container {
            padding: 0 var(--spacing-sm);
        }
    }
</style>

<script>
// Scroll Animations
const observerOptions = {
    threshold: 0.1,
    rootMargin: '0px 0px -50px 0px'
};

const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('animate');
        }
    });
}, observerOptions);

// Initialize animations
document.addEventListener('DOMContentLoaded', () => {
    const animatedElements = document.querySelectorAll('.animate-on-scroll');
    animatedElements.forEach(el => observer.observe(el));
});
</script>