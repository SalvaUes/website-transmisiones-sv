---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { client } from '../utils/sanityClient';

interface Props {
    title: string;
    description: string;
    image?: string;
}

const { 
    title, 
    description,
    image = '/default-social-image.png'
} = Astro.props;

const ajustes = await client.fetch(`*[_type == "ajustes"][0]`);
---

<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Orbitron:wght@400;500;600;700&display=swap" rel="stylesheet">

		<title>{title}</title>
		<meta name="description" content={description} />
        <meta property="og:title" content={title} />
        <meta property="og:description" content={description} />
        <meta property="og:image" content={new URL(image, Astro.url)} />
        <meta property="og:url" content={Astro.url} />
        <meta property="og:type" content="website" />
	</head>
	<body>
        <!-- Animated Background System -->
        <div class="bg-system" aria-hidden="true">
            <div class="bg-gradient"></div>
            <div class="bg-particles"></div>
            <div class="bg-mesh"></div>
        </div>
    <Header currentPath={Astro.url.pathname} />
        <main>
			<slot />
		</main>
		<Footer ajustes={ajustes} />
	</body>
</html>

<style is:global>
    /* ===== SISTEMA DE TOKENS MEJORADO ===== */
    :root {
        /* Paleta Principal Mejorada */
        --bg-900: #0a0e14;
        --bg-800: #0f1419; 
        --bg-700: #161b22;
        --bg-600: #1f252d;
        --surface: #1a2028;
        --surface-elevated: #252e38;
        
        /* Colores de Acento Premium */
        --primary: #ff6b1a;
        --primary-light: #ff8a3d;
        --primary-dark: #e55a17;
        --secondary: #00d4ff;
        --secondary-light: #33dcff;
        --secondary-dark: #00b8e6;
        --accent: #ffd700;
        --accent-light: #ffdf33;
        --success: #00ff88;
        --warning: #ffaa00;
        --danger: #ff4444;
        
        /* Sistema de Texto Jerárquico */
        --text-primary: #ffffff;
        --text-secondary: #e2e8f0;
        --text-muted: #94a3b8;
        --text-disabled: #64748b;
        --text-inverse: #0a0e14;
        
        /* Sistema Glass Premium */
        --glass-ultra: rgba(255,255,255,0.25);
        --glass-strong: rgba(255,255,255,0.18);
        --glass-medium: rgba(255,255,255,0.12);
        --glass-light: rgba(255,255,255,0.08);
        --glass-subtle: rgba(255,255,255,0.04);
        --glass-border: rgba(255,255,255,0.1);
        --glass-shadow: 0 8px 32px rgba(0,0,0,0.3);
        
        /* Efectos de Glow Mejorados */
        --glow-primary: 0 0 20px rgba(255,107,26,0.4), 0 0 40px rgba(255,107,26,0.2), 0 0 60px rgba(255,107,26,0.1);
        --glow-secondary: 0 0 20px rgba(0,212,255,0.4), 0 0 40px rgba(0,212,255,0.2), 0 0 60px rgba(0,212,255,0.1);
        --glow-accent: 0 0 20px rgba(255,215,0,0.4), 0 0 40px rgba(255,215,0,0.2);
        
        /* Bordes y Divisores */
        --border-subtle: rgba(255,255,255,0.08);
        --border-medium: rgba(255,255,255,0.12);
        --border-strong: rgba(255,255,255,0.16);
        --border-accent: rgba(255,107,26,0.3);
        
        /* Geometría y Espaciado */
        --radius-xs: 4px;
        --radius-sm: 8px;
        --radius-md: 12px;
        --radius-lg: 16px;
        --radius-xl: 24px;
        --radius-2xl: 32px;
        --spacing-xs: 0.25rem;
        --spacing-sm: 0.5rem;
        --spacing-md: 1rem;
        --spacing-lg: 1.5rem;
        --spacing-xl: 2rem;
        --spacing-2xl: 3rem;
        --spacing-3xl: 4rem;
        
        /* Sistema de Movimiento Premium */
        --motion-instant: 150ms;
        --motion-fast: 250ms;
        --motion-medium: 350ms;
        --motion-slow: 500ms;
        --motion-ultra-slow: 800ms;
        --ease-out: cubic-bezier(0.16, 1, 0.3, 1);
        --ease-in: cubic-bezier(0.4, 0, 1, 1);
        --ease-bounce: cubic-bezier(0.68, -0.55, 0.265, 1.55);
        --ease-elastic: cubic-bezier(0.25, 0.46, 0.45, 0.94);
        
        /* Sombras en Capas */
        --shadow-xs: 0 1px 2px rgba(0,0,0,0.1);
        --shadow-sm: 0 2px 4px rgba(0,0,0,0.15);
        --shadow-md: 0 4px 8px rgba(0,0,0,0.2);
        --shadow-lg: 0 8px 16px rgba(0,0,0,0.25);
        --shadow-xl: 0 16px 32px rgba(0,0,0,0.3);
        --shadow-2xl: 0 24px 48px rgba(0,0,0,0.35);
        
        /* Gradientes Mejorados */
        --gradient-primary: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
        --gradient-secondary: linear-gradient(135deg, var(--secondary) 0%, var(--secondary-light) 100%);
        --gradient-accent: linear-gradient(135deg, var(--accent) 0%, var(--accent-light) 100%);
        --gradient-glass: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%);
        --gradient-mesh: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 50%, var(--accent) 100%);
        
        /* Compatibilidad con tokens antiguos */
        --ease-automotive: var(--ease-elastic);
        --motion-enter: var(--motion-medium);
        --card-elevation: var(--shadow-lg);
        --neon-glow: var(--glow-primary);
    }

    /* ===== RESET Y BASE MEJORADOS ===== */
    *, *::before, *::after {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    html {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        background: 
            radial-gradient(1000px 800px at 20% 30%, rgba(255,107,26,0.06) 0%, transparent 70%),
            radial-gradient(800px 600px at 80% 70%, rgba(0,212,255,0.04) 0%, transparent 60%),
            radial-gradient(600px 400px at 50% 90%, rgba(255,215,0,0.03) 0%, transparent 50%),
            linear-gradient(135deg, var(--bg-900) 0%, var(--bg-800) 40%, var(--bg-700) 100%);
        color-scheme: dark;
        scroll-behavior: smooth;
        overflow-x: hidden;
        min-height: 100vh;
        font-size: 16px;
        line-height: 1.6;
    }

    body {
        color: var(--text-primary);
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        font-feature-settings: 'kern' 1, 'liga' 1;
        position: relative;
        transition: opacity var(--motion-medium) var(--ease-out);
    }

    /* Acolchado para el header fijo */
    main { padding-top: 72px; }
    @media (max-width: 768px) { main { padding-top: 64px; } }

    /* ===== TIPOGRAFÍA MEJORADA ===== */
    h1, h2, h3, h4, h5, h6 {
        font-family: 'Orbitron', -apple-system, BlinkMacSystemFont, sans-serif;
        font-weight: 600;
        letter-spacing: -0.02em;
        line-height: 1.2;
        text-rendering: optimizeLegibility;
    }

    h1 { font-size: clamp(2.5rem, 5vw, 4rem); }
    h2 { font-size: clamp(2rem, 4vw, 3rem); }
    h3 { font-size: clamp(1.5rem, 3vw, 2rem); }

    p { line-height: 1.7; }
    a { text-decoration: none; color: inherit; }

    /* ===== SISTEMA DE FONDO ANIMADO ===== */
    .bg-system {
        position: fixed;
        inset: 0;
        z-index: -1;
        overflow: hidden;
        pointer-events: none;
    }

    .bg-gradient {
        position: absolute;
        inset: 0;
        background: 
            radial-gradient(circle at 20% 30%, rgba(255,107,26,0.12) 0%, transparent 50%),
            radial-gradient(circle at 80% 70%, rgba(0,212,255,0.08) 0%, transparent 50%),
            radial-gradient(circle at 50% 10%, rgba(255,215,0,0.06) 0%, transparent 40%);
        animation: gradientFlow 20s ease-in-out infinite;
        opacity: 0.8;
    }

    .bg-particles {
        position: absolute;
        inset: 0;
        background-image:
            radial-gradient(2px 2px at 20px 30px, rgba(255,107,26,0.3), transparent),
            radial-gradient(2px 2px at 40px 70px, rgba(0,212,255,0.3), transparent),
            radial-gradient(1px 1px at 90px 40px, rgba(255,215,0,0.3), transparent),
            radial-gradient(1px 1px at 130px 80px, rgba(255,255,255,0.2), transparent);
        background-repeat: repeat;
        background-size: 200px 150px;
        animation: particlesDrift 30s linear infinite;
        opacity: 0.4;
    }

    .bg-mesh {
        position: absolute;
        inset: 0;
        background: 
            linear-gradient(90deg, transparent 98%, rgba(255,255,255,0.03) 100%),
            linear-gradient(0deg, transparent 98%, rgba(255,255,255,0.03) 100%);
        background-size: 100px 100px;
        animation: meshMove 25s linear infinite;
        opacity: 0.3;
    }

    @keyframes gradientFlow {
        0%, 100% { 
            transform: translateX(0) translateY(0) scale(1);
            filter: hue-rotate(0deg) brightness(1);
        }
        25% { 
            transform: translateX(-20px) translateY(-10px) scale(1.05);
            filter: hue-rotate(5deg) brightness(1.1);
        }
        50% { 
            transform: translateX(20px) translateY(15px) scale(0.95);
            filter: hue-rotate(10deg) brightness(1.2);
        }
        75% { 
            transform: translateX(-10px) translateY(10px) scale(1.02);
            filter: hue-rotate(5deg) brightness(1.05);
        }
    }

    @keyframes particlesDrift {
        0% { transform: translateX(0) translateY(0); }
        100% { transform: translateX(-200px) translateY(-150px); }
    }

    @keyframes meshMove {
        0% { transform: translateX(0) translateY(0); }
        100% { transform: translateX(100px) translateY(100px); }
    }

    /* ===== SISTEMA GLASS PREMIUM ===== */
    .glass {
        background: linear-gradient(135deg, var(--glass-medium), var(--glass-light));
        backdrop-filter: blur(16px) saturate(1.2);
        -webkit-backdrop-filter: blur(16px) saturate(1.2);
        border: 1px solid var(--glass-border);
        box-shadow: var(--glass-shadow);
        border-radius: var(--radius-lg);
        position: relative;
        overflow: hidden;
    }

    .glass::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 1px;
        background: var(--gradient-glass);
        opacity: 0.6;
    }

    .glass-strong {
        background: linear-gradient(135deg, var(--glass-strong), var(--glass-medium));
        backdrop-filter: blur(20px) saturate(1.3);
        -webkit-backdrop-filter: blur(20px) saturate(1.3);
        border: 1px solid rgba(255,255,255,0.15);
    }

    .glass-subtle {
        background: linear-gradient(135deg, var(--glass-subtle), var(--glass-light));
        backdrop-filter: blur(12px) saturate(1.1);
        -webkit-backdrop-filter: blur(12px) saturate(1.1);
    }

    /* ===== SISTEMA DE BOTONES PREMIUM ===== */
    .btn {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: var(--spacing-sm);
        background: var(--gradient-primary);
        color: var(--text-primary);
        padding: var(--spacing-md) var(--spacing-xl);
        border-radius: var(--radius-lg);
        font-weight: 600;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border: none;
        cursor: pointer;
        position: relative;
        overflow: hidden;
        transition: all var(--motion-medium) var(--ease-out);
        box-shadow: var(--shadow-md), var(--glow-primary);
        backdrop-filter: blur(10px);
        user-select: none;
    }

    .btn::before {
        content: '';
        position: absolute;
        inset: 0;
        background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.15) 50%, transparent 70%);
        transform: translateX(-100%) skewX(-15deg);
        transition: transform var(--motion-medium) var(--ease-out);
    }

    .btn:hover {
        transform: translateY(-3px) scale(1.02);
        box-shadow: var(--shadow-xl), var(--glow-primary);
    }

    .btn:hover::before {
        transform: translateX(200%) skewX(-15deg);
    }

    .btn:active {
        transform: translateY(-1px) scale(0.98);
        transition: transform var(--motion-fast) var(--ease-in);
    }

    .btn.outline {
        background: transparent;
        color: var(--primary);
        border: 2px solid var(--primary);
        box-shadow: var(--shadow-sm);
    }

    .btn.outline:hover {
        background: var(--primary);
        color: var(--text-primary);
        box-shadow: var(--shadow-lg), var(--glow-primary);
    }

    .btn.secondary {
        background: var(--gradient-secondary);
        box-shadow: var(--shadow-md), var(--glow-secondary);
    }

    /* ===== UTILIDADES Y HELPERS ===== */
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 var(--spacing-md);
    }

    .animate-in {
        opacity: 0;
        transform: translateY(30px);
        transition: all var(--motion-slow) var(--ease-out);
    }

    .animate-in.visible {
        opacity: 1;
        transform: translateY(0);
    }

    .animate-in.slide-left {
        transform: translateX(-30px);
    }

    .animate-in.slide-left.visible {
        transform: translateX(0);
    }

    .animate-in.scale {
        transform: scale(0.9);
    }

    .animate-in.scale.visible {
        transform: scale(1);
    }

    .hover-lift {
        transition: all var(--motion-medium) var(--ease-out);
    }

    .hover-lift:hover {
        transform: translateY(-4px);
        box-shadow: var(--shadow-xl);
    }

    .hover-glow {
        transition: all var(--motion-medium) var(--ease-out);
    }

    .hover-glow:hover {
        box-shadow: var(--shadow-lg), var(--glow-primary);
    }

    .no-scroll {
        height: 100vh;
        overflow: hidden !important;
    }

    .page-loading {
        opacity: 0;
        transform: translateY(20px);
        transition: all var(--motion-slow) var(--ease-out);
    }

    .page-loaded {
        opacity: 1;
        transform: translateY(0);
    }

    *:focus-visible {
        outline: 2px solid var(--primary);
        outline-offset: 2px;
        border-radius: var(--radius-sm);
    }

    ::selection {
        background: var(--primary);
        color: var(--text-primary);
    }

    /* Helpers para interacciones */
    .ripple { 
        position: absolute; 
        pointer-events: none; 
        border-radius: 50%; 
    }
    
    .card.expanded { 
        transform: translateY(-6px) scale(1.02) !important; 
    }

    /* ===== RESPONSIVE OPTIMIZATIONS ===== */
    @media (max-width: 768px) {
        .container { 
            padding: 0 var(--spacing-sm); 
        }
        
        .card { 
            transition: transform var(--motion-fast) var(--ease-out); 
        }

        .btn {
            padding: var(--spacing-md) var(--spacing-lg);
            font-size: 0.85rem;
        }
    }

    @media (max-width: 480px) {
        html {
            font-size: 14px;
        }
    }

    /* ===== PREFERENCIAS DE MOVIMIENTO ===== */
    @media (prefers-reduced-motion: reduce) {
        *,
        *::before,
        *::after {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
        }
        
        .bg-gradient,
        .bg-particles,
        .bg-mesh {
            animation: none;
        }
    }
</style>

<script>

    // ===== SISTEMA DE EFECTOS PREMIUM =====
    class PremiumEffects {
        private intersectionObserver?: IntersectionObserver;
        private animationFrameId?: number;

        constructor() {
            this.init();
        }

        private init() {
            document.addEventListener('DOMContentLoaded', () => {
                this.setupScrollReveal();
                this.setupRippleEffects();
                this.setupCardInteractions();
                this.setupFloatingElements();
                this.setupPerformanceOptimizations();
                this.markPageAsLoaded();
            });
        }

        // ===== SCROLL REVEAL MEJORADO =====
        private setupScrollReveal() {
            this.intersectionObserver = new IntersectionObserver(
                (entries) => {
                    entries.forEach((entry) => {
                        if (entry.isIntersecting) {
                            entry.target.classList.add('visible');
                            // Añadir delay progresivo para elementos múltiples
                            if (entry.target.getAttribute('data-delay')) {
                                const delay = parseInt(entry.target.getAttribute('data-delay') || '0');
                                setTimeout(() => {
                                    entry.target.classList.add('visible');
                                }, delay);
                            }
                        }
                    });
                },
                { 
                    threshold: 0.1, 
                    rootMargin: '0px 0px -50px 0px' 
                }
            );

            // Observar elementos con animación
            document.querySelectorAll('.animate-in').forEach((el) => {
                this.intersectionObserver?.observe(el);
            });
        }

        // ===== EFECTOS RIPPLE PREMIUM =====
        private setupRippleEffects() {
            document.addEventListener('click', (e) => {
                const target = e.target as HTMLElement;
                const rippleContainer = target.closest('.btn, .card, .glass') as HTMLElement;
                
                if (!rippleContainer) return;

                const rect = rippleContainer.getBoundingClientRect();
                const ripple = document.createElement('div');
                const size = Math.max(rect.width, rect.height);
                const x = e.clientX - rect.left - size / 2;
                const y = e.clientY - rect.top - size / 2;

                ripple.classList.add('ripple');
                ripple.style.cssText = `
                    width: ${size}px;
                    height: ${size}px;
                    left: ${x}px;
                    top: ${y}px;
                    background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 70%);
                    animation: rippleEffect 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
                    z-index: 1000;
                `;

                // Agregar estilos de animación si no existen
                if (!document.querySelector('#ripple-styles')) {
                    const style = document.createElement('style');
                    style.id = 'ripple-styles';
                    style.textContent = `
                        @keyframes rippleEffect {
                            from {
                                transform: scale(0);
                                opacity: 1;
                            }
                            to {
                                transform: scale(4);
                                opacity: 0;
                            }
                        }
                    `;
                    document.head.appendChild(style);
                }

                rippleContainer.style.position = 'relative';
                rippleContainer.appendChild(ripple);

                setTimeout(() => {
                    ripple.remove();
                }, 600);
            });
        }

        // ===== INTERACCIONES DE TARJETAS 3D =====
        private setupCardInteractions() {
            document.querySelectorAll('.card, .glass').forEach((card) => {
                const cardElement = card as HTMLElement;

                // Efecto de inclinación 3D
                cardElement.addEventListener('mousemove', (e) => {
                    if (window.innerWidth <= 768) return; // Skip en móvil

                    const rect = cardElement.getBoundingClientRect();
                    const x = e.clientX - rect.left;
                    const y = e.clientY - rect.top;
                    const centerX = rect.width / 2;
                    const centerY = rect.height / 2;
                    const rotateX = (y - centerY) / 10;
                    const rotateY = (centerX - x) / 10;

                    cardElement.style.transform = `
                        perspective(1000px) 
                        rotateX(${rotateX}deg) 
                        rotateY(${rotateY}deg) 
                        translateZ(10px)
                        scale(1.02)
                    `;
                });

                cardElement.addEventListener('mouseleave', () => {
                    cardElement.style.transform = '';
                });

                // Efecto de glow dinámico
                cardElement.addEventListener('mouseenter', () => {
                    cardElement.style.boxShadow = `
                        var(--shadow-xl), 
                        var(--glow-primary),
                        0 0 40px rgba(255,107,26,0.1)
                    `;
                });

                cardElement.addEventListener('mouseleave', () => {
                    cardElement.style.boxShadow = '';
                });
            });
        }

        // ===== ELEMENTOS FLOTANTES ANIMADOS =====
        private setupFloatingElements() {
            // Crear partículas flotantes decorativas
            const particleContainer = document.createElement('div');
            particleContainer.className = 'floating-particles';
            particleContainer.style.cssText = `
                position: fixed;
                inset: 0;
                pointer-events: none;
                z-index: -1;
                overflow: hidden;
            `;

            for (let i = 0; i < 8; i++) {
                const particle = document.createElement('div');
                particle.className = 'floating-particle';
                particle.style.cssText = `
                    position: absolute;
                    width: ${Math.random() * 6 + 2}px;
                    height: ${Math.random() * 6 + 2}px;
                    background: radial-gradient(circle, 
                        ${i % 3 === 0 ? 'rgba(255,107,26,0.4)' : 
                          i % 3 === 1 ? 'rgba(0,212,255,0.4)' : 
                          'rgba(255,215,0,0.4)'} 0%, 
                        transparent 70%);
                    border-radius: 50%;
                    left: ${Math.random() * 100}%;
                    top: ${Math.random() * 100}%;
                    animation: float${i % 3} ${10 + Math.random() * 10}s linear infinite;
                `;
                particleContainer.appendChild(particle);
            }

            // Añadir animaciones de partículas
            if (!document.querySelector('#particle-styles')) {
                const style = document.createElement('style');
                style.id = 'particle-styles';
                style.textContent = `
                    @keyframes float0 {
                        0%, 100% { transform: translateY(0) translateX(0) rotate(0deg); opacity: 0.3; }
                        25% { transform: translateY(-20px) translateX(10px) rotate(90deg); opacity: 0.6; }
                        50% { transform: translateY(-40px) translateX(-5px) rotate(180deg); opacity: 0.3; }
                        75% { transform: translateY(-20px) translateX(-15px) rotate(270deg); opacity: 0.5; }
                    }
                    @keyframes float1 {
                        0%, 100% { transform: translateY(0) translateX(0) rotate(0deg); opacity: 0.4; }
                        33% { transform: translateY(-30px) translateX(-10px) rotate(120deg); opacity: 0.7; }
                        66% { transform: translateY(-15px) translateX(15px) rotate(240deg); opacity: 0.3; }
                    }
                    @keyframes float2 {
                        0%, 100% { transform: translateY(0) translateX(0) rotate(0deg); opacity: 0.2; }
                        50% { transform: translateY(-25px) translateX(8px) rotate(180deg); opacity: 0.6; }
                    }
                `;
                document.head.appendChild(style);
            }

            document.body.appendChild(particleContainer);
        }

        // ===== OPTIMIZACIONES DE RENDIMIENTO =====
        private setupPerformanceOptimizations() {
            // Lazy loading para elementos pesados
            const lazyElements = document.querySelectorAll('[data-lazy]');
            if (lazyElements.length > 0) {
                const lazyObserver = new IntersectionObserver((entries) => {
                    entries.forEach((entry) => {
                        if (entry.isIntersecting) {
                            const element = entry.target as HTMLElement;
                            if (element.dataset.lazySrc) {
                                element.style.backgroundImage = `url(${element.dataset.lazySrc})`;
                            }
                            element.classList.add('loaded');
                            lazyObserver.unobserve(element);
                        }
                    });
                });

                lazyElements.forEach((el) => lazyObserver.observe(el));
            }

            // Throttle para eventos de scroll intensivos
            let scrollTimeout: number;
            window.addEventListener('scroll', () => {
                if (scrollTimeout) {
                    window.cancelAnimationFrame(scrollTimeout);
                }
                scrollTimeout = window.requestAnimationFrame(() => {
                    this.handleScroll();
                });
            }, { passive: true });

            // Preload de recursos críticos
            this.preloadCriticalResources();
        }

        private handleScroll() {
            const scrollY = window.scrollY;
            const windowHeight = window.innerHeight;

            // Parallax sutil para elementos de fondo
            const bgElements = document.querySelectorAll('.bg-system > *');
            bgElements.forEach((el, index) => {
                const element = el as HTMLElement;
                const speed = 0.5 + (index * 0.1);
                element.style.transform = `translateY(${scrollY * speed}px)`;
            });

            // Actualizar progreso de scroll para elementos que lo necesiten
            const scrollProgress = Math.min(scrollY / (document.body.scrollHeight - windowHeight), 1);
            document.documentElement.style.setProperty('--scroll-progress', scrollProgress.toString());
        }

        private preloadCriticalResources() {
            // Precargar fuentes críticas
            const fonts = [
                'https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;600;700;800;900&display=swap',
                'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap'
            ];

            fonts.forEach(font => {
                const link = document.createElement('link');
                link.rel = 'preload';
                link.as = 'style';
                link.href = font;
                document.head.appendChild(link);
            });
        }

        private markPageAsLoaded() {
            // Eliminar estado de carga
            document.body.classList.remove('page-loading');
            document.body.classList.add('page-loaded');

            // Trigger para animaciones iniciales
            setTimeout(() => {
                document.querySelectorAll('.animate-in').forEach((el, index) => {
                    setTimeout(() => {
                        el.classList.add('visible');
                    }, index * 100);
                });
            }, 100);
        }

        public destroy() {
            this.intersectionObserver?.disconnect();
            if (this.animationFrameId) {
                cancelAnimationFrame(this.animationFrameId);
            }
        }
    }

    // ===== INICIALIZACIÓN GLOBAL =====
    let effectsInstance: PremiumEffects;

    // Inicialización inmediata
    if (document.readyState === 'loading') {
        effectsInstance = new PremiumEffects();
    } else {
        effectsInstance = new PremiumEffects();
    }

    // ===== GESTIÓN DE VIEW TRANSITIONS =====
    document.addEventListener('astro:page-load', () => {
        // Limpiar instancia anterior
        effectsInstance?.destroy();
        
        // Crear nueva instancia
        effectsInstance = new PremiumEffects();
        
        // Reactivar animaciones para nueva página
        setTimeout(() => {
            document.querySelectorAll('.animate-in').forEach((el) => {
                el.classList.remove('visible');
                setTimeout(() => el.classList.add('visible'), 50);
            });
        }, 100);
    });

    // ===== UTILIDADES GLOBALES =====
    declare global {
        interface Window {
            createRipple: (element: HTMLElement, x: number, y: number) => void;
            scrollToElement: (selector: string) => void;
        }
    }

    // Utilidad global para crear efectos ripple
    window.createRipple = (element: HTMLElement, x: number, y: number) => {
        const rect = element.getBoundingClientRect();
        const ripple = document.createElement('div');
        const size = Math.max(rect.width, rect.height);
        
        ripple.className = 'ripple';
        ripple.style.cssText = `
            width: ${size}px;
            height: ${size}px;
            left: ${x - size / 2}px;
            top: ${y - size / 2}px;
            background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 70%);
            animation: rippleEffect 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            position: absolute;
            border-radius: 50%;
            pointer-events: none;
            z-index: 1000;
        `;
        
        element.style.position = 'relative';
        element.appendChild(ripple);
        
        setTimeout(() => ripple.remove(), 600);
    };

    // Utilidad global para scroll suave
    window.scrollToElement = (selector: string) => {
        const element = document.querySelector(selector);
        if (element) {
            element.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
            });
        }
    };
</script>